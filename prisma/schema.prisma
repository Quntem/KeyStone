// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SERVICE
}

model User {
  id    String @id @default(cuid())
  path String @default("/")
  email String @unique
  password String
  role Role @default(USER)
  username String
  name  String
  tenantId String 
  tenant tenant @relation(fields: [tenantId], references: [id])
  sessions session[]
  managerId String?
  manager User? @relation(fields: [managerId], references: [id], name: "managerUsers")
  managerUsers User[] @relation(name: "managerUsers")
  groups groupUser[]
  userAppAccess userAppAccess[]
  domainsCreator domain[] @relation(name: "DomainsCreator")
  disabled Boolean @default(false)
  domainId String?
  domain domain? @relation(fields: [domainId], references: [id], name: "domainUsers")
}

enum TenantType {
  Organization
  Team
}

model tenant {
  displayName String?
  id    String @id @default(cuid())
  name  String @unique
  logo String?
  color String?
  description String?
  colorContrast String?
  users User[]
  parentTenantId String?
  parentTenant tenant? @relation(fields: [parentTenantId], references: [id] , name: "tenantChildren")
  tenantChildren tenant[] @relation(name: "tenantChildren")
  apps app[]
  domains domain[] @relation(name: "tenantDomains")
  groups group[]
  externalAppAccess ExternalAppAccess[]
  type TenantType @default(Organization)
}

model group {
  id    String @id @default(cuid())
  name  String
  description String?
  groupname String @unique
  users groupUser[]
  type GroupType @default(Organizational)
  tenantId String
  tenant tenant @relation(fields: [tenantId], references: [id])
}

enum GroupType {
  Organizational
  Functional
}

model groupUser {
  id    String @id @default(cuid())
  userId String
  groupId String
  user User @relation(fields: [userId], references: [id])
  group group @relation(fields: [groupId], references: [id])
  @@unique([userId, groupId])
}

model session {
  id String @id @default(cuid())
  userId String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  expiresAt DateTime @default(dbgenerated("now() + interval '24 hours'")) 
  appSessions userAppSession[] 
}

model app {
    id    String @id @default(cuid())
    secret String @default(cuid())
    logo String
    description String
    name  String @unique
    tenantId String 
    allowedURLs String[]
    tenant tenant @relation(fields: [tenantId], references: [id])
    userAppAccess userAppAccess[]
    mainUrl String
    availableForExternal Boolean @default(false)
    inExternalTenants ExternalAppAccess[]
    publicExternal Boolean @default(false)
}

model ExternalAppAccess {
    id    String @id @default(cuid())
    appId String
    app app @relation(fields: [appId], references: [id])
    tenantId String
    tenant tenant @relation(fields: [tenantId], references: [id])
    expiresAt DateTime?
    createdAt DateTime @default(now())
    @@unique([appId, tenantId])
}

model userAppAccess {
    id    String @id @default(cuid())
    userId String
    appId String
    expiresAt DateTime?
    createdAt DateTime @default(now())
    user User @relation(fields: [userId], references: [id])
    app app @relation(fields: [appId], references: [id])
    appSessions userAppSession[]
    @@unique([userId, appId])
}

model userAppSession {
    id    String @id @default(cuid())
    expiresAt DateTime?
    createdAt DateTime @default(now())
    userAppAccessId String
    userAppAccess userAppAccess @relation(fields: [userAppAccessId], references: [id], onDelete: Cascade)
    sessionId String
    session session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    @@unique([userAppAccessId, sessionId])
}

model domain {
  id             String   @id @unique @default(uuid())
  name           String   @unique
  createdAt      DateTime @default(now())
  accessedAt     DateTime @default(now())
  creatorId      String?
  creator        User? @relation(fields: [creatorId], references: [id], name: "DomainsCreator")
  verified       Boolean  @default(false)
  tenantId       String
  tenant         tenant? @relation(fields: [tenantId], references: [id], name: "tenantDomains")
  hasMXRecord    Boolean  @default(false)
  domainUsers User[] @relation(name: "domainUsers")
}